{{>partial_header}}
package {{packageName}}

import (
	"net/http"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

type Services struct {
	{{#apiInfo}}
	{{#apis}}
	{{#operations}}
	{{classname}} {{classname}}Service
	{{/operations}}
	{{/apis}}
	{{/apiInfo}}
}

func assertNotNil(value interface{}, message string) {
	if value == nil {
		panic(message)
	}
}

func NewRouter(serviceImpls Services) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	{{#apiInfo}}
	{{#apis}}
	{{#operations}}
	assertNotNil(serviceImpls.{{classname}}, "service {{classname}} must be provided to {{packageName}}.NewRouter().")
	{{/operations}}
	{{/apis}}
	{{/apiInfo}}

	routes := []Route{}
	{{#apiInfo}}
	{{#apis}}
	{{#operations}}
	routes = append(routes, {{classname}}(serviceImpls.{{classname}})...)
	{{/operations}}
	{{/apis}}
	{{/apiInfo}}

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}
